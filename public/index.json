[{"content":"For the non-Asians, LINE is the Japanese version of WeChat or WhatsApp. So yeah, it\u0026rsquo;s Japanese spyware that has spread to the majority of East Asia.\nLINE Features  LINE Pay: Like Apple Pay but with LINE Instant messaging: This was the original purpose of the app LINE News: Like Google News but in the LINE app LINE Doctor: Why? Why would anyone use LINE to contact a doctor? Go face to face or use a Signal LINE Music: Japanese Spotify in the LINE app More corporate services  Problems with LINE Features  LINE Pay:  Apple has been infamous for locking users in their walled garden, I think it\u0026rsquo;s time to look at LINE LINE Pay is not private, should be obvious why. Using any form of centralized payment system can be tracked easily Using LINE Pay is just stupid, you have a credit card/cash for a reason, why are you so lazy?   Instant messaging:  The app itself is horrendous. Thank god I have pihole to block most of the ads, but once I leave my house, ads come in like crazy. The front page is nothing but ads, you have to tap another button to get to your chat list on mobile Oh but does LINE have a desktop version? No. At least not a real application. They could\u0026rsquo;ve at least used Electron like Discord does, but they only have an extension for Chrome. I don\u0026rsquo;t use Chrome. I don\u0026rsquo;t care if that\u0026rsquo;s my problem, an app of this size should be cross platform. They have the money and staff to do it. SO DO IT. Why cut out a portion of your consumers that don\u0026rsquo;t want to be staring at a tiny screen for texts?   LINE News: Stop. No one is reading news on your app, go develop a desktop version of LINE first LINE Music: LINE is really trying every avenue to steal your data and rope you into their ecosystem. It may work on the Japanese, but it won\u0026rsquo;t work on sane people. When tools like yt-dlp exists, there is no need for a streaming service that steals your data, drains your battery, and gives you the same audio quality  Message to People Who Still Willingly Use LINE Please switch to another platform. LINE forces you into their ecosystem, bombards you with ads, and is obviously backdoored. Please switch to Signal. Signal has no ads, no ecosystem, and less likely to be backdoored.\nLINE CTF LINE CTF is the only redeeming fact about the company. I enjoy CTFs, and LINE delivers. No company in my country will ever host a CTF.\n","permalink":"https://blog.hyperboly.net/posts/rant/line/","summary":"For the non-Asians, LINE is the Japanese version of WeChat or WhatsApp. So yeah, it\u0026rsquo;s Japanese spyware that has spread to the majority of East Asia.\nLINE Features  LINE Pay: Like Apple Pay but with LINE Instant messaging: This was the original purpose of the app LINE News: Like Google News but in the LINE app LINE Doctor: Why? Why would anyone use LINE to contact a doctor? Go face to face or use a Signal LINE Music: Japanese Spotify in the LINE app More corporate services  Problems with LINE Features  LINE Pay:  Apple has been infamous for locking users in their walled garden, I think it\u0026rsquo;s time to look at LINE LINE Pay is not private, should be obvious why.","title":"Line"},{"content":"Memory is essential to understand for pwning in CTFs. Here, I will try to explain the structure of memory and behaviors for beginners in pwn.\nDefinition of Memory First, a basic definition of memory. Have you ever seen that long card in your computer with black squares on it? That\u0026rsquo;s memory. Most people (who watch Linus Tech Tips) know this as Random Access Memory (RAM), but at the core it is just temporary storage on your computer. Memory Structure I will abstract a lot of the memory structure here, so read on knowing there will be inaccuracies. Think of memory as a building, each floor is a storage space, and a building only has so many floors. Each floor and groups of floors can have a different purpose, the basement is for parking, floor 1 is for the lobby, floor 2 is for a restaurant, and the rest are residential. Now think of the floors as space in memory. There are 3 main spaces in memory, the data, stack, and heap.\nDiagram of Memory    Memory Space Description     Data Is where \u0026ldquo;static\u0026rdquo; variables are   Stack Is where \u0026ldquo;local\u0026rdquo; variables are   Heap Is where \u0026ldquo;buffers\u0026rdquo; exist    The Data Memory Space The data space will not be used in many beginner pwn questions, I don\u0026rsquo;t think I\u0026rsquo;ve ever encountered it. It also means that they don\u0026rsquo;t get deleted once a function is finished, these variables persist until the program dies. This means that nothing in the data space should change while the program is running. This would include things from libraries, a variable named MAX_HEIGHT, and others like that.\nThe Stack Memory Space This is the part of memory that many beginner pwn questions will want you to attack. If you\u0026rsquo;ve ever went on stackoverflow.com, the stack in memory is where that name came from. \u0026ldquo;Stack overflow\u0026rdquo; attacks are a common way that CTFs question beginners. The stack is where variable in a function exists. This would include the main function. Stacks contains variables that the programmer defines the memory to. For example, int foo = 7; is the programmer dedicating 4 bytes of memory to foo. He is dedicating 4 bytes because by default in C, an integer is 4 bytes in length. Inside the 4 bytes, it would only store \u0026ldquo;7\u0026rdquo; though.\nProbably more important than variables in the stack is the pointer and addresses in the stack. The stack pointer is not like pointers in C/C++. The stack pointer indicates where the program is while the program is running. This becomes very helpful while debugging. The Extended Instruction Pointer exists at the end of the stack execution, where it will look for the next instruction. This becomes useful when we do something called a \u0026ldquo;stack overflow,\u0026rdquo; where you overflow the whole stack and enter in the malicious instruction onto the original instruction pointer space. Later articles will further explain the stack.\nThe stack does NOT include the buffers, which is in the \u0026ldquo;heap.\u0026rdquo;\nThe Heap Memory Space The heap is, as mentioned, where the buffers live. But what are buffers? Buffers are spaces in code that the programmer dictates. How is this different from declaring a variable in the stack? Stack variables can\u0026rsquo;t be resized, but buffers can. If I create a array in C, like this: int ary[100], I am dynamically assigning 100 bytes to ary. Confused? Me too! Stack variables have the life cycle of being declared, stored, and initialized during runtime. When the function ends, so do the variables in the stack.\nThe heap is more \u0026ldquo;floaty,\u0026rdquo; as in it exists in no particular order. Multiple buffers can live in memory without an order like stack variables do. The memory allocated is also decided by the programmer, not the compiler. Before I mentioned int takes 4 bytes of space, this is not a decision by the programmer but by the compiler. Compared to int ary[100], the programmer specifies that he wants 100 bytes for this.\n","permalink":"https://blog.hyperboly.net/posts/notes/memory-basics/","summary":"Memory is essential to understand for pwning in CTFs. Here, I will try to explain the structure of memory and behaviors for beginners in pwn.\nDefinition of Memory First, a basic definition of memory. Have you ever seen that long card in your computer with black squares on it? That\u0026rsquo;s memory. Most people (who watch Linus Tech Tips) know this as Random Access Memory (RAM), but at the core it is just temporary storage on your computer.","title":"Memory Basics"},{"content":"Pwn as a CTF category has always interested me because of the low level understanding it requires to be good at it. Turns out I\u0026rsquo;m terrible at it, so here are my notes to try and organize what I\u0026rsquo;ve learned. The pico primer really helped me with this. CryptoCat\u0026rsquo;s tutorial is also great for learning.\nDefinitions: Abstraction I find that many people trying to get into computers get confused with abstraction as I did before, so I\u0026rsquo;ll try to explain it in simple terms. Abstraction means to dumb down. For example, in math, many questions ask you to \u0026ldquo;simplify an expression\u0026rdquo; when you simplify an expression, you are abstracting the original expression. Or, if I have a chunk of code in a program that takes in user input, it would be stupid to always repeat that code on and on. Which is why we have functions, so we can name it \u0026ldquo;take_input\u0026rdquo; and abstract away the code in the function. This is most evident in programming languages, as you\u0026rsquo;ll read later, programming languages just abstract assembly; assembly just abstracts binary.\nDisassembling Disassembling is basically the process of turning some binary into assembly language. Humans aren\u0026rsquo;t able to read binary as well as they can assembly. To read binary, you would have to separate them into different chunks, try to decode what the binary\u0026rsquo;s value is, and try to translate that into what the machine is doing. Assembly makes this process 10% easier by telling you exactly what the computer is doing. This is still really hard to read because it provides you with extremely LOW LOW levels of abstraction in memory. Things like Extended Instruction Pointer (EIP) that takes a long time to fully grasp the concept.\nTooling: What you\u0026rsquo;ll notice with pwn is that there is a million different tools that achieve the same thing, I\u0026rsquo;ll start with debugging:\nGNU Debugger (GDB) GDB is an amazing debugger for pwn, it can do everything it needs to well. GDB takes in a binary and provides a disassembler, gives you the location of different pointers, functions\u0026hellip; The problem is that the syntax will take forever to learn.\nGEF GEF is essentially a wrapper for GDB. This means that it simplifies GDB\u0026rsquo;s syntax so that we don\u0026rsquo;t have to type long lines just to achieve one thing. I learned GEF when watching a video on pwnable.tw\u0026rsquo;s start, which I haven\u0026rsquo;t finished because I don\u0026rsquo;t understand it at all.\npwndbg pwndbg is another wrapper for GDB (see a pattern here?). It is written in python and I think further simplifies GDB\u0026rsquo;s syntax (compared to GEF). It is a little easier to learn and the current one I\u0026rsquo;m learning.\nGhidra Ghidra is a tool developed by the NSA for disassembling and turning binaries into C. It is written in Java so I only run it in a VM, because any Java software is bloat for your system. The tool gives you a UI unlike the other 3 tools above, disassembles the code like with GDB, and tries to recreate the binary in C. This can give you a lot more insight into what the code is doing, which helps a lot in CTFs.\npwn pwn is a pretty sweet python library that helps a LOT in solving CTFs and automating your solutions. The problem is that I\u0026rsquo;m a terrible programmer and can only program in BASH. It includes stuff like remote which allows you to attack remote services with python, it\u0026rsquo;s pretty cool.\n","permalink":"https://blog.hyperboly.net/posts/notes/starting-pwn/","summary":"Pwn as a CTF category has always interested me because of the low level understanding it requires to be good at it. Turns out I\u0026rsquo;m terrible at it, so here are my notes to try and organize what I\u0026rsquo;ve learned. The pico primer really helped me with this. CryptoCat\u0026rsquo;s tutorial is also great for learning.\nDefinitions: Abstraction I find that many people trying to get into computers get confused with abstraction as I did before, so I\u0026rsquo;ll try to explain it in simple terms.","title":"Starting Pwn"},{"content":"This blog is just for me to rant and take notes for random stuff I\u0026rsquo;m doing. Currently, I play CTFs, selfhost servers, and play table tennis. This blog itself is selfhosted with hugo. An unfiltered look into the demented mind of a nerd.\nDISCLAIMER: Anything I write as fact should not be taken as fact, it is just the understanding of low GPA highschool student. For example, \u0026ldquo;The Linux kernel has a scheduler for CPU tasks.\u0026rdquo; should not be taken as fact as I found that from a YouTube video (source).\n","permalink":"https://blog.hyperboly.net/about/","summary":"This blog is just for me to rant and take notes for random stuff I\u0026rsquo;m doing. Currently, I play CTFs, selfhost servers, and play table tennis. This blog itself is selfhosted with hugo. An unfiltered look into the demented mind of a nerd.\nDISCLAIMER: Anything I write as fact should not be taken as fact, it is just the understanding of low GPA highschool student. For example, \u0026ldquo;The Linux kernel has a scheduler for CPU tasks.","title":"About"},{"content":"A Comprehensive Guide on GPU Passthroughs in Proxmox Some Prerequisites and Notes This method of passing through my GPU works for:\n Kernel: 5.15.30 Proxmox Version 7.2 TUF Gaming X570 Plus Motherboard Dual Radeon RX6600XT Asus GPU Ryzen 7 5800X CPU  In the BIOs for your host computer (where Proxmox is installed) settings, these options should be modified:\n Secure boot: Off CPU Settings:  SUM: On PSS: On   PCI Subsystem Settings:  Above 4G Encoding: On SR-IOV Support: On   AMD CBS:  IOMMU: On    The Passthrough Process This is the part of the process where everything is either done in an ssh session, on the host computer\u0026rsquo;s shell, or the webGUI for proxmox.\nUpdate Proxmox First make sure your Proxmox is updated with the correct repos. You can follow the Proxmox docs for this.\nNext, you want to get your favorite text editor (Nano is preinstalled but I will use vim)\n # apt-get install vim\n GRUB/Systemd Edits For Systemd, every step will be the same, the only difference is you will edit /etc/kernel/cmdline for the GRUB flags, all flags will be the same.\n# vim /etc/default/grub to get edit a file. I assume you have background knowledge already in a terminal, if not, refer to vim(1) or nano(1).\nFind the line GRUB_CMDLINE_LINUX_DEFAULT = \u0026quot;quiet\u0026quot; and add these flags within the quotation marks:\n iommu=pt amd_iommu=on video=efifb:off video=vesafb:off textonly video=simplefb:off nofb\n Write quit.\n update-grub update-grub works even if you are on systemd boot.\n After this, reboot.\nMessing With Drivers Check if you did everything correctly with\n dmesg | grep -e DMAR -e IOMMU\n This should output something along the lines of \u0026ldquo;IOMMU enabled\u0026rdquo; or something like it.\nYou can also check with\n cat /proc/cmdline\n This should output what you modified in GRUB or systemd boot.\nNow you want to edit the /etc/modprobe.d/blacklist.conf file in order to blacklist your host machine from using your GPU so that the GPU isn\u0026rsquo;t split between your host and VM (splitting the processes will break it). Add these lines:\n blacklist nvidia\nblacklist nouveau\nblacklist radeon\n Now edit the /etc/modules file and add:\n vfio\nvfio_iommu_type1\nvfio_pci\nvfio_virqfd\n Now you update initramfs and reboot with:\n update-initramfs -u\nreboot\n Isolating Your GPU Run lspci -nnk and find your GPU. My RX6600XT GPU shows up as:\n 0a:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 23 [1002:73ff] (rev c1)\n Below it should be a audio controller. Mine looks like:\n 0a:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Device [1002:ab28]\n Note the 0a:00 and [1002:XXXX], these will be important soon.\nNow you will edit /etc/modprobe.d/vfio.conf and add:\n options vfio-pci ids=XXXX:XXXX,XXXX:XXXX disable-vga=1\n Where XXXX:XXXX are substituted by the numbers in the [] before. For example, for me it would look like:\n options vfio-pci ids=1002:73ff,1002:ab28 disable_vga=1\n Now reboot again just in case.\nTo check if you are using the correct kernel module for your GPU, do lspci -v and see if your GPU\u0026rsquo;s kernel in use is vfio-pci or the line is just not there. If either is true, you\u0026rsquo;re halfway there.\nBlack Magic Section Welcome to Black Magic, where nothing in the section makes sense to me.\nRun cat /proc/iomem and under your GPU bus (0X:00, or for me it\u0026rsquo;s 0a:00), there might be a BOOTFB. If you don\u0026rsquo;t see BOOTFB, skip this section. If you do, follow the next steps carefully.\n cd /root\ntouch gpufix.sh\nvim gpufix.sh\n Inside this file, you will add these lines:\n #!/bin/bash\necho 1 \u0026gt; /sys/bus/pci/devices/0000:0X:00.0/remove\necho 1 \u0026gt; /sys/bus/pci/rescan\n Write and quit. Run chmod +x gpufix.sh. Lastly, add to the cron entry.\n crontab -e\n@reboot /root/gpufix.sh at the end of the file.\n Reboot.\nVM Creation If the settings are not mentioned in this segment, leave them as default. Go into the web GUI for Proxmox and click on create VM. I used a Windows 11 VM with VirtIO drivers (get the ISOs from Windows officially and Redhat unofficially).\nThe following segment are settings needed for this to work:\n System Settings:  q35 OVMF EFI disk and TPM (note that EFI and TPM must be stored on the same disk)   Disk Settings:  SCSI At least 50GB for Windows bloat   CPU:  As much as you can give it, for example 6 cores.   RAM:  As much as you can give it, for example 8GiB.   Networking:  Virt-IO (paravirtualized)   Do not start after creation.  After you have created the VM, go into the hardware settings and add an ISO image. This ISO image would be the Virt-IO drivers that you downloaded before. In the options tab in the VM under hardware check the Boot Order. The Boot Order should be your 50GB (or what you set it) hard disk first, your Windows ISO (in ide), net0, and lastly the Virt-IO drivers (ide).\nWindows 11 Installation First, be prepared for the pain and suffering Windows 11 installation can be. Linux is years ahead with the installation with the live USB thing, why can\u0026rsquo;t Microsoft catch up? Anyways, you\u0026rsquo;ll apply the virt-IO drivers here.\n Click on install Windows and custom install. You must select Windows 11 pro. This will prompt you into a window where you can select Load Drivers. In the file explorer, click on your C: or whatever drive that has the virt-IO drivers. Drop down the amd64 folder and choose the w11 folder. Press OK and Next. Load another driver called the NetKVM driver, choose NetKVM\u0026gt;w11\u0026gt;amd64. Go through the rest of the install process reading what it prompts you to do. CAREFULLY READ THESE BECAUSE YOU CAN OPT OUT OF SPYWARE\u0026hellip; probably. After everything\u0026rsquo;s settled and you can log into Windows, go to file explorer and select the virt-IO drive once more. Click on virtio-win-gt-x64 and execute it. Shutdown the VM and go back to the Proxmox web GUI. Select hardware again and add a PCI device. Look for your 0X:00.0 vendor tag and select it. Tick every box except for primary GPU (PCI-express, ROM-Bar, All Functions). Start your VM up again. Go into the browser and look for AMD GPU drivers, download it and install it. While installing, you might notice your host machine\u0026rsquo;s monitor start displaying Windows but your mouse and keyboard may not be able to do anything. Reboot and follow the next section. Finally, tick the primary GPU option in your GPU options.  Finishing Touches By now, you are already set to go, except that you can\u0026rsquo;t do anything with your keyboard and mouse. To fix this, shutdown the VM once more and go to hardware settings in the Proxmox web GUI. Add USB devices and passthrough every port with your keyboard, mouse, whatever else you want. Now, you are truly done. Start up your VM and enjoy being exploited by Windows.\nExternal Links If you continue to struggle with GPU passthrough, here are all the articles I went through to find my solution.\n  Documentation  Proxmox Docs Arch Wiki Debian Docs    Unofficial Guides  Reddit Ultimate Guide (outdated) Reddit 2 Min Guide (outdated) Tutorial From Proxmox Forums RX6600XT Specific (didn\u0026rsquo;t work for me) Dumping V-BIOs Blog    Forums  Black Magic Radeon RX6600 Specific Post on Reddit Dumping V-BIOs Thread    Support This Guide If you have any other GPU\u0026rsquo;s that you got working whether absurdly like me or even normally, consider making a pull request for it or submitting an issue on the github!\n","permalink":"https://blog.hyperboly.net/posts/guides/gpupassthroughamd6600/","summary":"A Comprehensive Guide on GPU Passthroughs in Proxmox Some Prerequisites and Notes This method of passing through my GPU works for:\n Kernel: 5.15.30 Proxmox Version 7.2 TUF Gaming X570 Plus Motherboard Dual Radeon RX6600XT Asus GPU Ryzen 7 5800X CPU  In the BIOs for your host computer (where Proxmox is installed) settings, these options should be modified:\n Secure boot: Off CPU Settings:  SUM: On PSS: On   PCI Subsystem Settings:  Above 4G Encoding: On SR-IOV Support: On   AMD CBS:  IOMMU: On    The Passthrough Process This is the part of the process where everything is either done in an ssh session, on the host computer\u0026rsquo;s shell, or the webGUI for proxmox.","title":"GPU passthrough for RX6600XT"}]